TestingUser-Acceptance Testing:This will happen when our UI is more developed and the database connection is established. Unit Test Scenarios:* Check successful user login* Check failed login for bad password* Check failed login for non-existent user* Check successful upload* Check failed upload for file size* Check failed upload for existing filename* Check successful download* Check failed download* Insert to database success* Insert to database fail* Query database success* Query to database fail* Successful Search* Failed Search (will be specified once coded)* Successful Browse* Failed Browse for too large of query (timeout)* Successful contact/message* Failed Contact/message for incorrect user* Failed contact/message for no user present	Integration Testing:		We will use integration testing whenever we have made changes to multiple functions of the website. Functionality that is affected by user permission level will need to be integrated with login/session monitoring, because different users will have different access which needs to be verified and tested. Browsing and searching will need to be integrated because these functions will be inter-related. When performing integration testing we will use automated unit tests to ensure each system is working independently before testing the integration of the systems.We will run the following integration tests if changes are made to any two systems involved:* Data retrieved * Ensure that non logged in users cannot access the members’ area.* Ensure that a logged in user can view documents they have access to.	* Ensure that a logged in used can not view docs that they do not have access to.* Ensure that a logged in Researcher or Data Scientist can upload files* Ensure that a logged in student cannot upload files* Ensure that a logged in user can download file* Ensure that a logged in user can search* Ensure that a logged in user can browse* Ensure that admin has all functionality* Ensure that logged in users can contact contributors.Regression Testing: Regression testing is checking to ensure that all the systems of your software are still working properly after you have made a change to the code. This would involve testing your entire system for basic and integrated functionality. Known bugs should also be tested for. 	Our group will do regression testing by running automated unit tests whenever individual systems are altered, and running integration testing when multiple systems are altered. We will keep track of any bugs we encounter along the way and set up testing cases for those bugs. As bugs are encountered we will incorporate a plan for testing for those bugs into our regression testing plan. 	Since we have not made any changes to our code after our first commit, the regression testing will happen in our next sprint. Verification:All unit and regression testing.Validation:All user-acceptance and integration testing. 